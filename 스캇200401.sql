SELECT *
FROM EMP;

-- 월급 순위 매기기
SELECT ENAME, S1, S2, DECODE(S1, S2, NO-1, NO)
FROM
(
SELECT ENAME, SAL "S1", LAG(SAL, 1, 0) OVER(ORDER BY SAL DESC) "S2",
ROWNUM "NO"
FROM
(
SELECT ENAME, SAL
FROM EMP
ORDER BY SAL DESC
));

SELECT ENAME, SAL, LAG(SAL, 3, 0) OVER(ORDER BY SAL DESC)
FROM EMP;

-- RANK 함수로 순위 매기기
SELECT ENAME, SAL, RANK() OVER (ORDER BY SAL DESC)
FROM EMP;

SELECT NAME, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT;

-- 학년별 키 순위를 구하시오.
SELECT NAME, GRADE, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT
WHERE GRADE = 1
UNION ALL
SELECT NAME, GRADE, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT
WHERE GRADE = 2
UNION ALL
SELECT NAME, GRADE, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT
WHERE GRADE = 3
UNION ALL
SELECT NAME, GRADE, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT
WHERE GRADE = 4;

SELECT NAME, GRADE, HEIGHT,
RANK() OVER (PARTITION BY GRADE ORDER BY HEIGHT DESC)
FROM STUDENT;

-- JOIN 
SELECT *
FROM EMP;
-- 12행
SELECT *
FROM DEPT;
-- 4행
SELECT *
FROM EMP, DEPT
ORDER BY ENAME;
--CARTISAN PRODUCT 교차곱 = 48행 

-- INNER JOIN 
SELECT E.ENAME, E.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT *
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO;

ROLLBACK;
DELETE FROM DEPT WHERE DEPTNO = 10;

-- RIGHT OUTER JOIN
SELECT *
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO;

SELECT *
FROM STUDENT;

SELECT *
FROM PROFESSOR;

SELECT S.NAME "STUDENT", P.NAME "PROFESSOR" 
FROM STUDENT S, PROFESSOR P
WHERE S.PROFNO = P.PROFNO;

-- DDL (테이블 삭제-DROP-, 수정-ALTER-, 생성-CREATE-)
CREATE TABLE Reply(
    id number,
    content varchar2(200) not null,
    boardId number,
    userId number, 
    CONSTRAINT REPLY_PK PRIMARY KEY (id),
    CONSTRAINT REPLY_FK_BOARD_ID FOREIGN KEY (boardId) REFERENCES Board (id),
    CONSTRAINT REPLY_FK_USER_ID FOREIGN KEY (userId) REFERENCES Users (id)
);

-- SEQUENCE
CREATE SEQUENCE users_seq
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE board_seq
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE reply_seq
INCREMENT BY 1
START WITH 1;



DELETE FROM BOARD;
DELETE FROM USERS;

DROP SEQUENCE BOARD_SEQ;
DROP SEQUENCE USERS_SEQ;



CREATE SEQUENCE users_seq
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE board_seq
INCREMENT BY 1
START WITH 1; 

-- Users, Board, Reply 
-- DML (데이터 조작어)
INSERT INTO USERS(ID, USERNAME, EMAIL) 
VALUES(USERS_SEQ.nextval, 'ssar', 'ssar@nate.com');

INSERT INTO USERS(ID, USERNAME, EMAIL) 
VALUES(USERS_SEQ.nextval, 'love', 'love@nate.com');

INSERT INTO USERS(ID, USERNAME, EMAIL) 
VALUES(USERS_SEQ.nextval, 'cos', 'cos@nate.com');

COMMIT;

SELECT *
FROM USERS;

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID) 
VALUES(BOARD_SEQ.nextval, '오라클 1강', 'DDL이란?', 1);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID) 
VALUES(BOARD_SEQ.nextval, '오라클 2강', 'DML이란?', 1);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID) 
VALUES(BOARD_SEQ.nextval, '오라클 3강', 'DCL이란?', 2);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID) 
VALUES(BOARD_SEQ.nextval, '오라클 4강', 'DQL이란?', 1);

COMMIT;

SELECT *
FROM BOARD;

INSERT INTO REPLY(ID, CONTENT, BOARDID, USERID)
VALUES (REPLY_SEQ.nextval, '재밌어요', 1, 1);

INSERT INTO REPLY(ID, CONTENT, BOARDID, USERID)
VALUES (REPLY_SEQ.nextval, '진짜 재밌어요', 1, 2);

COMMIT;

SELECT *
FROM REPLY;

-- JOIN
SELECT *
FROM USERS U, BOARD B
WHERE U.ID = B.USERID;
-- 3번 유저 나오게! LEFT OUTER JOIN 
SELECT *
FROM USERS U, BOARD B
WHERE U.ID = B.USERID(+);

-- 댓글 적은 유저 
SELECT *
FROM USERS U, REPLY R
WHERE U.ID = R.USERID;
-- 댓글 안적은 유저도 같이 여줘!
SELECT *
FROM USERS U, REPLY R
WHERE U.ID = R.USERID(+)
AND R.ID IS NULL;

SELECT *
FROM USERS U, REPLY R
WHERE U.ID = R.USERID(+) -- 전체 유저 
MINUS
SELECT *
FROM USERS U, REPLY R
WHERE U.ID = R.USERID; -- 댓글 적은 유저 

SELECT *
FROM USERS;

SELECT *
FROM BOARD;

SELECT *
FROM REPLY;

SELECT B.ID, B.TITLE, COUNT(R.ID) "댓글 수"
FROM BOARD B, REPLY R, USERS U
WHERE B.ID = R.BOARDID(+) AND B.USERID = U.ID
GROUP BY B.ID, B.TITLE, U.USERNAME;

SELECT  ID, TITLE, USERID,
(SELECT COUNT(*)
FROM REPLY
WHERE BOARDID = B.ID) "댓글 수"
FROM BOARD B;

-- 
SELECT B.ID, B.TITLE, U.USERNAME, COUNT(R.ID) "댓글 수"
FROM BOARD B, REPLY R, USERS U
WHERE B.ID = R.BOARDID(+) AND B.USERID = U.ID
GROUP BY B.ID, B.TITLE, U.USERNAME;

SELECT B.ID, B.TITLE, U.USERNAME,
(SELECT COUNT(*) 
FROM REPLY
WHERE BOARDID = B.ID) "댓글 수"
FROM BOARD B, USERS U
WHERE B.USERID = U.ID;

