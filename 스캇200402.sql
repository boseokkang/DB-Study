-- SELF JOIN
SELECT EMPNO, ENAME, JOB, MGR
FROM EMP;

SELECT E1.EMPNO, E1.ENAME, E1.JOB, E1.MGR, E2.ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO(+);

-- INNER JOIN
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;
-- ANSI JOIN
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E JOIN DEPT D
ON E.DEPTNO = D.DEPTNO
WHERE E.DEPTNO = 10;
-- INNER JOIN 
SELECT *
FROM BOARD B, REPLY R
WHERE B.ID = R.BOARDID;
-- ANSI JOIN
SELECT *
FROM BOARD B LEFT OUTER JOIN REPLY R
ON B.ID = R.BOARDID;
-- ANSI JOIN 
SELECT *
FROM BOARD B FULL OUTER JOIN REPLY R
ON B.ID = R.BOARDID;

-- 테이블 복제 
CREATE TABLE STUDENT2
AS
SELECT STUDNO, NAME, ID, GRADE, HEIGHT, WEIGHT, DEPTNO1, DEPTNO2, PROFNO
FROM STUDENT;

SELECT * FROM STUDENT2;

-- VIEW 생성
CREATE OR REPLACE VIEW STUDENT_VIEW 
AS
SELECT STUDNO, NAME, ID, GRADE, HEIGHT, WEIGHT, DEPTNO1, DEPTNO2, PROFNO
FROM STUDENT;

SELECT *
FROM STUDENT;

SELECT *
FROM STUDENT_VIEW;

-- VIEW 테이블에 데이터 삽입
INSERT INTO STUDENT_VIEW(STUDNO, NAME, ID, GRADE, HEIGHT, WEIGHT, DEPTNO1, DEPTNO2, PROFNO)
VALUES (1993, 'Hailey', 'mink330', 2, 172, 50, 123, null, null);


-- DML, INSERT 
-- EX01
INSERT INTO DEPT2 (dcode, dname, pdept, area)
VALUES(9000, 'temp_1', 1006, 'Temp Area');
-- EX02
INSERT INTO DEPT2 (dcode, dname, pdept)
VALUES(9002, 'temp_3', 1006);
-- EX03
INSERT INTO PROFESSOR (PROFNO, NAME, ID, POSITION, PAY, HIREDATE)
VALUES (5001, 'James Bond', 'Love_me', 'a full professor', 500, '2014-10-23');
-- EX05
CREATE TABLE t_minus(no1 NUMBER, no2 NUMBER(3), no3 NUMBER(3,2));
INSERT INTO t_minus VALUES(1, 1, 1);
INSERT INTO t_minus VALUES(1.1, 1.1, 1.1);
INSERT INTO t_minus VALUES(-1.1, -1.1, -1.1);

SELECT *
FROM t_minus;

-- DML, INSERT와 서브쿼리를 사용하여 여러 행 입력하기
CREATE TABLE PROFESSOR3
AS
SELECT *
FROM PROFESSOR
WHERE 1 = 2;

INSERT INTO PROFESSOR3
SELECT *
FROM PROFESSOR;

CREATE TABLE PROFESSOR4
AS
SELECT PROFNO, NAME, PAY
FROM PROFESSOR
WHERE 1 = 2;

INSERT INTO PROFESSOR4
SELECT PROFNO, NAME, PAY
FROM PROFESSOR
WHERE PROFNO > 4000;

SELECT *
FROM PROFESSOR4;

-- DML, INSERT ALL 을 이용한 여러 테이블에 여러 행 입력하기
-- EX01
CREATE TABLE PROF_3(profno NUMBER, name VARCHAR2(25));
CREATE TABLE PROF_4(profno NUMBER, name VARCHAR2(25));

INSERT ALL 
WHEN profno BETWEEN 1000 AND 1999 THEN 
INTO PROF_3 VALUES(profno, name)
WHEN profno BETWEEN 2000 AND 2999 THEN 
INTO PROF_4 VALUES(profno, name)
SELECT profno, name
FROM PROFESSOR;

SELECT profno, name
FROM PROF_3;

SELECT profno, name
FROM PROF_4;
-- EX02
TRUNCATE TABLE PROF_3;
TRUNCATE TABLE PROF_4;

INSERT ALL 
INTO PROF_3 VALUES(profno, name)
INTO PROF_4 VALUES(profno, name)
SELECT profno, name
FROM PROFESSOR
WHERE profno BETWEEN 3000 AND 3999;

-- DML, UPDATE
-- EX01
UPDATE PROFESSOR
SET bonus =  200
WHERE position = '조교수';
-- EX02
UPDATE PROFESSOR
SET pay = pay * 1.15
WHERE position = (SELECT position FROM PROFESSOR WHERE NAME = '양선희')
AND pay < 250;

-- DML, DELETE
DELETE FROM DEPT2
WHERE DCODE >= 9000 AND DCODE <= 9999;

-- DML, MERGE
-- 1. 테이블 생성
CREATE TABLE charge_01 (u_date VARCHAR2(6), cust_no NUMBER, u_time NUMBER, charge NUMBER);
CREATE TABLE charge_02 (u_date VARCHAR2(6), cust_no NUMBER, u_time NUMBER, charge NUMBER);
-- 2. 데이터 입력
INSERT INTO charge_01 VALUES ('141001', 1000, 2, 1000);
INSERT INTO charge_01 VALUES ('141001', 1001, 2, 1000);
INSERT INTO charge_01 VALUES ('141001', 1002, 1, 500);
INSERT INTO charge_02 VALUES ('141002', 1000, 3, 1500);
INSERT INTO charge_02 VALUES ('141002', 1001, 4, 2000);
INSERT INTO charge_02 VALUES ('141002', 1003, 1, 500);
COMMIT;
-- 3. 데이터 모을 집계용 테이블 생성
CREATE TABLE ch_total (u_date VARCHAR2(6), cust_no NUMBER, u_time NUMBER, charge NUMBER);
-- 4. MERGE 작업 QUERY (charge_01 와 ch_total 병합)
MERGE INTO ch_total total 
USING charge_01 ch01
ON(total.u_date = ch01.u_date)
WHEN MATCHED THEN
UPDATE SET total.cust_no = ch01.cust_no
WHEN NOT MATCHED THEN
INSERT VALUES (ch01.u_date, ch01.cust_no, ch01.u_time, ch01.charge);
-- 5. MERGE 작업 QUERY (charge_02 와 ch_total 병합)
MERGE INTO ch_total total
USING charge_02 ch02
ON(total.u_date = ch02.u_date)
WHEN MATCHED THEN
UPDATE SET total.cust_no = ch02.cust_no
WHEN NOT MATCHED THEN
INSERT VALUES (ch02.u_date, ch02.cust_no, ch02.u_time, ch02.charge);
-- 6. MERGE 후 테이블 조회 
SELECT *
FROM ch_total;

-- DML, UPDATE 조인
CREATE TABLE DEPT_HIST (EMPNO NUMBER(4), APPOINTSEQNO NUMBER(4), DEPTNO NUMBER(2),APPOINTDD DATE);

ALTER TABLE DEPT_HIST
ADD CONSTRAINT PK_DEPT_HIST PRIMARY KEY (EMPNO, APPOINTSEQNO);

INSERT INTO DEPT_HIST
SELECT EMPNO, 1 APPOINTSEQNO, 99 DEPTNO, SYSDATE APPOINTDD
FROM EMP
WHERE DEPTNO = 20;
COMMIT;

INSERT INTO DEPT_HIST VALUES (9322, 1, 99, SYSDATE);
INSERT INTO DEPT_HIST VALUES (9414, 1, 99, SYSDATE);
COMMIT;

SELECT E.EMPNO, E.DEPTNO TOBE_DEPTNO, D.DEPTNO ASIS_DEPTNO
FROM EMP E, DEPT_HIST D
WHERE E.EMPNO = D.EMPNO;

UPDATE DEPT_HIST D
SET D.DEPTNO = (SELECT E.DEPTNO FROM EMP E WHERE E.EMPNO = D.EMPNO);
COMMIT;

SELECT * 
FROM DEPT_HIST;

UPDATE DEPT_HIST D 
SET D.DEPTNO = (SELECT E.DEPTNO FROM EMP E WHERE E.EMPNO = D.EMPNO)
WHERE 
EXISTS (SELECT 1 FROM EMP E WHERE E.EMPNO = D.EMPNO);

-- SubQuery
SELECT *
FROM EMP
WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME = 'SMITH');
-- ↑
SELECT SAL
FROM EMP
WHERE ENAME = 'SMITH';

SELECT *
FROM EMP
WHERE SAL IN (SELECT SAL FROM EMP WHERE JOB = 'MANAGER');

SELECT *
FROM EMP
WHERE SAL = 2975 OR SAL = 2850 OR SAL = 2450;

SELECT *
FROM EMP
WHERE SAL IN (2975, 2850, 2450);

SELECT ENAME, COMM
FROM EMP
WHERE COMM < (SELECT COMM FROM EMP WHERE ENAME = 'WARD');

SELECT COMM
FROM EMP
WHERE ENAME = 'WARD';

-- SUB QUERY 문제 1
-- STUDENT 테이블과 DEPARTMENT 테이블을 사용하여 '서진수' 학생과 전공이 동일한 학생들의 이름과 전공 이름 출력
SELECT *
FROM DEPARTMENT;
SELECT *
FROM STUDENT; 

SELECT S.NAME, D.DNAME 
FROM STUDENT S, DEPARTMENT D
WHERE S.DEPTNO1 = (SELECT DEPTNO1 FROM STUDENT WHERE NAME = '서진수') 
AND D.DEPTNO = S.DEPTNO1;

-- SUB QUERY 문제 2
-- PROFESSOR 테이블과 DEPARTMENT 테이블을 조회하여 조인형 교수보다 나중에 입사한 사람의 이름과 입사일, 학과명 출력
SELECT *
FROM PROFESSOR;
SELECT *
FROM DEPARTMENT;

SELECT P.NAME, P.HIREDATE, D.DNAME
FROM PROFESSOR P, DEPARTMENT D
WHERE P.DEPTNO = D.DEPTNO
AND (SELECT HIREDATE FROM PROFESSOR WHERE NAME = '조인형') < P.HIREDATE; 

-- SUB QUERY 문제 3
-- STUDENT 테이블에서 DEPTNO1 이 201번인 학과의 평균 몸무게보다 몸무게가 많은 학생들의 이름과 몸무게를 출력
SELECT *
FROM STUDENT;

SELECT AVG(WEIGHT)
FROM STUDENT
WHERE DEPTNO1 = 201;

SELECT NAME, WEIGHT
FROM STUDENT S
WHERE DEPTNO1 = 201 AND (SELECT AVG(WEIGHT) FROM STUDENT WHERE DEPTNO1 = 201) < S.WEIGHT;

-- 다중행 SUB QUERY
SELECT *
FROM EMP2;

